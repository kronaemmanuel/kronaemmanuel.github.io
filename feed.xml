<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-11-13T15:18:23+05:00</updated><id>/feed.xml</id><entry><title type="html">Implementing SHA-256 in Go language (with strings🥲)</title><link href="/2021/09/12/Implementing-SHA-256-in-Go-lang.html" rel="alternate" type="text/html" title="Implementing SHA-256 in Go language (with strings🥲)" /><published>2021-09-12T00:00:00+05:00</published><updated>2021-09-12T00:00:00+05:00</updated><id>/2021/09/12/Implementing-SHA-256-in-Go-lang</id><content type="html" xml:base="/2021/09/12/Implementing-SHA-256-in-Go-lang.html">&lt;p&gt;I have put off doing anything in Go for a very long time. I had went through the Go tour a long time ago, but I hadn’t actually made anything in it. I mean, I did make a &lt;a href=&quot;http://lab.kronaemmanuel.com/&quot;&gt;website&lt;/a&gt;(not complete yet ofc) in Hugo, which is a web framework made with Go, but it didn’t feel like writing actual Go code. So to scratch this itch, i decided to finally write some Go code.&lt;/p&gt;

&lt;p&gt;And I chose to implement SHA-256 algorithm with it. Since I joined the &lt;a href=&quot;http://hackclub.com/&quot;&gt;Hack Club&lt;/a&gt; community, I have been very motivated to do such small little experiments, just for fun. It always feels good to finish a small challenge that you’ve set for yourself.&lt;/p&gt;

&lt;p&gt;I used this &lt;a href=&quot;https://qvault.io/cryptography/how-sha-2-works-step-by-step-sha-256/&quot;&gt;Qvault: How SHA-256 works guide&lt;/a&gt; for the algorithm, but there were some other ver useful links that I used, which are listed below:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://golang.org/doc/tutorial/getting-started&quot;&gt;Go Docs: Getting Started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://golang.org/doc/tutorial/create-module&quot;&gt;Go Docs: Create a Module&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/willf/pad/blob/master/pad.go&quot;&gt;Willf: String right/left pad library&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.geeksforgeeks.org/left-rotation-right-rotation-string-2/&quot;&gt;GeeksForGeeks: How to rotate a string&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.geeksforgeeks.org/xor-of-two-binary-strings/&quot;&gt;GeeksForGeeks: How to XOR two binary strings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.geeksforgeeks.org/how-to-reverse-a-string-in-golang/&quot;&gt;GeeksForGeeks: How to reverse a string in Go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/25592084/converting-binary-string-to-a-hexadecimal-string-java&quot;&gt;Stack Overflow: Convert a binary string to hexadecimal string&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;challenges-i-faced&quot;&gt;Challenges I faced:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Obviously, the biggest challenge was that i was unfamiliar with the language, so doing anything meant doing some searching to find the right syntax to do something in Go language. But still, I was surprised that I was able to implement it with not that much difficulty. I think it goes to show that Go language has been well designed to be pretty intuitive. And also that the patterns you pick up from one language often carry over to other languages as well, so once you have worked with a couple of languages, it becomes easier to pick up new ones.&lt;/li&gt;
  &lt;li&gt;Code grew too big in a single file&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lessons-learnt&quot;&gt;Lessons learnt:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;The Go compiler is really good, although sometimes it was annoying that it would let me keep anything in the code that I wasn’t using. I initially felt that this was slowing me down, since I wanted to iterate fast and move from trying one thing to another quickly. But soon, I got into the habit of commenting anything I wasn’t using. And ultimately, it resulted in much cleaner code. I’ve been very guilty of leaving unused imports in javascript code because javascript doesn’t error out if i do that.&lt;/li&gt;
  &lt;li&gt;Go’s editor support is really good. I started by coding on VSCode which had a really good extension. But I soon switched over to neovim, which is my primary code editor. I was able to get really good support through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;coc-go&lt;/code&gt; extension. I will look into more advanced vim extensions such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vim-go&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go-vim&lt;/code&gt; for the next time I do some Go programming.&lt;/li&gt;
  &lt;li&gt;Using &lt;a href=&quot;http://repl.it/&quot;&gt;Repl.it&lt;/a&gt; for quick iterations, and testing out individual functions was really useful, especially with the code file growing to 400+ lines. I got into this habit recently after my mentor(and boss) recommended that I use this practice for React Native development. In React Native development, using &lt;a href=&quot;https://snack.expo.dev/&quot;&gt;Snack&lt;/a&gt; really helped me test new things quickly without worrying about it interacting with the whole app.&lt;/li&gt;
  &lt;li&gt;The next time I build a Go program, I want to divide my code into multiple modules. I did it all in one file this time, But next time, I’ll definitely use multiple modules. It really does become a hassle to have all your code in one file. Also, it would be good for me to learn about using vim marks, I started doing it a while back, but never got into the habit. They would be really good for when you need to create a new function, and then quickly jump back to where you were gonna use that function, which I needed to do SO many times in this project.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-i-want-to-do-next&quot;&gt;What I want to do next:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;I want to pickup Rust lang, that is also a language about which I have known for a long time, but haven’t gotten around to implementing anything in it. I don’t know what to make in it yet, but I bet it will be fun.&lt;/li&gt;
  &lt;li&gt;I also didn’t use the main feature which Go provides which is exceptional multi-threading. I definitely want to make something which uses this feature of Go language. Perhaps some dynamic programming solutions will be cool to implement (&lt;a href=&quot;https://www.geeksforgeeks.org/graph-coloring-set-2-greedy-algorithm/&quot;&gt;Map coloring algorithm&lt;/a&gt;? &lt;a href=&quot;https://muller.unitime.org/lscs04.pdf&quot;&gt;Iterative Forward Search&lt;/a&gt;?)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;links&quot;&gt;Links:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kronaemmanuel/sha256-go&quot;&gt;Repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">I have put off doing anything in Go for a very long time. I had went through the Go tour a long time ago, but I hadn’t actually made anything in it. I mean, I did make a website(not complete yet ofc) in Hugo, which is a web framework made with Go, but it didn’t feel like writing actual Go code. So to scratch this itch, i decided to finally write some Go code.</summary></entry><entry><title type="html">Trying various CMS(s) with my Jekyll website</title><link href="/2021/09/07/CMS-for-jekyll.html" rel="alternate" type="text/html" title="Trying various CMS(s) with my Jekyll website" /><published>2021-09-07T00:00:00+05:00</published><updated>2021-09-07T00:00:00+05:00</updated><id>/2021/09/07/CMS-for-jekyll</id><content type="html" xml:base="/2021/09/07/CMS-for-jekyll.html">&lt;p&gt;Alright, so tbh, I kinda hate Jekyll, it just seems too old. I guess Eleventy, Hugo, Gatsby are way better for generating static websites. But anyways, I came to Jekyll because I wanted to experience something other than javascript.&lt;/p&gt;

&lt;p&gt;In my last post, I discovered that I couldn’t easily put images etc. into my blogpost and hence was unable to explain or show some things that I would have wanted to. So to solve that issue, I tried three things.&lt;/p&gt;
&lt;h2 id=&quot;contentful&quot;&gt;Contentful&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.contentful.com/&quot;&gt;Contentful&lt;/a&gt; is a service which allows you to manage a headless CMS which your static site generator (such as Jekyll) can use to pull in data. I found the following useful links about how I could use Contentful with my website, however, I eventually gave up on trying to use it.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://katiekodes.com/jekyll-api-headless-cms/&quot;&gt;Katie Kodes’ article&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/contentful/jekyll-contentful-data-import&quot;&gt;Contentful’s jekyll plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;netlify-cms&quot;&gt;Netlify CMS&lt;/h2&gt;
&lt;p&gt;The great Netlify had way better docs and guidance than Contentful, but I didn’t wanna switch over my blog to netlify because I was already using it for some other websites and wanted to get more accustomed to Github Pages and Github Actions. Here are some useful links tho:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.netlifycms.org/docs/jekyll/&quot;&gt;Netlify CMS Jekyll Docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.netlifycms.org/docs/add-to-your-site&quot;&gt;Netfliy CMS General Add to Site Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;jekyll-admin&quot;&gt;Jekyll Admin&lt;/h2&gt;
&lt;p&gt;After trying my luck with both CMSs above, I remembered that I had come across Jekyll Admin &lt;a href=&quot;https://github.com/jekyll/jekyll-admin/&quot;&gt;repo&lt;/a&gt; when I was browsing the Jekyll organization on github once. So I decided to give it a go. It seems pretty simple to use and also fulfills all my requirements. Although there is one requirement that I want to still test. Does it allow me to put in images without any effort? Let’s test it rn.&lt;/p&gt;

&lt;p&gt;And no, we can’t add it easilly. So I guess this whole thing was a failure. Follow me for more disappointing experiences like this 🥲&lt;/p&gt;</content><author><name></name></author><summary type="html">Alright, so tbh, I kinda hate Jekyll, it just seems too old. I guess Eleventy, Hugo, Gatsby are way better for generating static websites. But anyways, I came to Jekyll because I wanted to experience something other than javascript.</summary></entry><entry><title type="html">Creating a new website using Hugo</title><link href="/2021/09/07/Hugo-as-a-blogging-medium.html" rel="alternate" type="text/html" title="Creating a new website using Hugo" /><published>2021-09-07T00:00:00+05:00</published><updated>2021-09-07T00:00:00+05:00</updated><id>/2021/09/07/Hugo-as-a-blogging-medium</id><content type="html" xml:base="/2021/09/07/Hugo-as-a-blogging-medium.html">&lt;p&gt;I need a website where I can easily write blogposts of the fun projects I do. I want to host it on Github Pages on the subdomain &lt;a href=&quot;http://www.lab.kronaemmanuel.com&quot;&gt;lab.kronaemmanuel.com&lt;/a&gt;. The idea being that the page is a collection of all the “experiments” I do. I want to have a website which has the following features:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Showcases the various fun little projects that I work on&lt;/li&gt;
  &lt;li&gt;Shows a mini essay that I write while I create the project as a form of documentation of how the project was built.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hence, on the development side of things, I want a platform where it is super easy to write content, which I can then post. I thought that I could do so with my Jekyll personal website, but it doesn’t look like Jekyll can easilly connect to some pre built headless CMS such as Netlify CMS or Contentful. So I’m looking at other options. Even though I love javascript, and its my forte, I want to use other languages, So I’m going to try Hugo.&lt;/p&gt;

&lt;p&gt;Hugo is a static site generator made in Go Language, which I’ve always wanted to use anyways so this is a nice excuse for me to learn a bit of Go Language as I make my website.&lt;/p&gt;

&lt;p&gt;Hugo’s documentation is definitely not that good. While Jekyll gives me a running website even without a theme, it seems that I wouldn’t be able to do so in Hugo. Hugo also doesn’t have documentation on how to setup a website if you’re not installing a prebuilt theme where Jekyll has awesome documentation on what to do if you’re starting from scratch. Therefore, as I figure it out, I want to write this blogpost to document how to get started with Hugo without a theme.&lt;/p&gt;

&lt;p&gt;Right away, I can see that running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hugo server -D&lt;/code&gt; gives me a couple of warnings that:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WARN 2021/09/07 01:21:41 found no layout file for &quot;HTML&quot; for kind &quot;page&quot;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination.
WARN 2021/09/07 01:21:41 found no layout file for &quot;HTML&quot; for kind &quot;home&quot;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination.
WARN 2021/09/07 01:21:41 found no layout file for &quot;HTML&quot; for kind &quot;taxonomy&quot;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination.
WARN 2021/09/07 01:21:41 found no layout file for &quot;HTML&quot; for kind &quot;section&quot;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination.
WARN 2021/09/07 01:21:41 found no layout file for &quot;HTML&quot; for kind &quot;taxonomy&quot;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Seems like I need at layouts files for at least “page”, “home”, “taxonomy”, and “section”. Well, let’s see if these are really required, or if I can skip some of them.&lt;/p&gt;

&lt;h2 id=&quot;create-a-layout-file&quot;&gt;Create a layout file&lt;/h2&gt;
&lt;p&gt;So I guessed that it needed a basic layout file, so I created one called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layouts/index.html&lt;/code&gt; and put some random html in it, and now my website actually has content showing on its home page. But ofcourse, that’s not what i want. I want a layout page which allows me to put content inside it. So let’s just setup some basic html for now, and then we can look at how to put content inside the layout.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Sample Title&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Hello, welcome to a working Hugo website&amp;lt;/h1&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;put-content-inside-a-layout-file&quot;&gt;Put content inside a layout file&lt;/h2&gt;
&lt;p&gt;I remember that while glossing over the docs, there was mention of a &lt;a href=&quot;https://pkg.go.dev/text/template&quot;&gt;Go templating language&lt;/a&gt;. Although the docs on the Go website were boring, the documentation on Hugo’s website about &lt;a href=&quot;https://gohugo.io/templates/introduction/&quot;&gt;templating&lt;/a&gt; was quite useful. So already I understand that we can use &lt;a href=&quot;https://gohugo.io/content-management/front-matter/&quot;&gt;front matter&lt;/a&gt; (metadata about some content file) fields to specify a title for the page instead of using hardcoded text in the layout file. So let’s make some modifications:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;{{ .Content }}&amp;lt;/h1&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since the front matter can contain the values for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Title&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content&lt;/code&gt; so we have put these here to be fetched from the content itself.&lt;/p&gt;

&lt;p&gt;Now for our content file, I can create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content/_index.md&lt;/code&gt; which will be the content file for our home page.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: Home
layout: index
---
Hello There

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I can now rejoice a bit as our home page is finally working, and I can put stuff in it.&lt;/p&gt;
&lt;h2 id=&quot;using-hugo-pipes-for-assets&quot;&gt;Using Hugo Pipes for Assets&lt;/h2&gt;
&lt;p&gt;We need a way to style our document and for that we need to include CSS. All style files are considered an asset, so to use those within our project, we will use &lt;a href=&quot;https://gohugo.io/hugo-pipes/introduction/&quot;&gt;Hugo Pipes&lt;/a&gt;. Let’s see how they work. First I can create a new folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/assets&lt;/code&gt; and a file within that to contain my css: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/assets/main.css&lt;/code&gt;. Let’s put some simple css in it for now:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;body {
  color: red;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I set the font color to red just so it would be immediately visible if my Hugo Pipe was working correctly. I can put the pipe in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/layout/index.html&lt;/code&gt; like this in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;lt;!-- Default Stylesheet --&amp;gt;
    {{ $style := resources.Get &quot;main.css&quot; }}
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;{{ $style.Permalink }}&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And its working, I did have to restart my server though, as it didn’t recognize the new file in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/assets&lt;/code&gt; folder otherwise. Now my text is red, So i know that the css is working correctly.&lt;/p&gt;
&lt;h2 id=&quot;partial-templates&quot;&gt;Partial Templates&lt;/h2&gt;
&lt;p&gt;We need a navigation bar for our website, and we probably want it on most pages, so we can make a partial template of it which we can include in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout/index.html&lt;/code&gt; which is probably our default layout. A partial template is not a full page, but rather just a part of it.&lt;/p&gt;

&lt;p&gt;I create a new partial template at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout/partials/navbar.html&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/layout/partials/&lt;/code&gt; is a special folder just for partial templates. Here is some simple code which we put in our navbar:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;nav&amp;gt;
  &amp;lt;a href=&quot;/&quot;&amp;gt;Home&amp;lt;/a&amp;gt;
  &amp;lt;a href=&quot;/about&quot;&amp;gt;About&amp;lt;/a&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now to include this partial in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout/index.html&lt;/code&gt; template, we can use the partial function from Hugo templating langugage:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;lt;!-- Navigation Bar --&amp;gt;
    {{ partial &quot;navbar.html&quot; . }}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now see a navigation bar in our homepage. Although the About page doesn’t work, we can fix that.&lt;/p&gt;
&lt;h2 id=&quot;adding-more-pages&quot;&gt;Adding more pages&lt;/h2&gt;
&lt;p&gt;To add more pages, I &lt;a href=&quot;https://gohugo.io/templates/base/&quot;&gt;looked around a bit&lt;/a&gt;, and found that I needed a default template, so I created a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/layout/_default/page.html&lt;/code&gt; template, gave it all the same content as my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout/index.html&lt;/code&gt;. I guess the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout/index.html&lt;/code&gt; is just for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.md&lt;/code&gt; content page, and the the one in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout/_default&lt;/code&gt; directory is for everything else. Anyways, I also added an About page in my content folder as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/content/about.md&lt;/code&gt;. I put some sample content in it and set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout&lt;/code&gt; template as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;page&lt;/code&gt; in my front matter:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: Home
layout: page
---
# About me
Blim Blam
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;add-a-navigation-bar&quot;&gt;Add a navigation bar&lt;/h2&gt;
&lt;p&gt;In Jekyll, I was using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;navigation_routes.yaml&lt;/code&gt; data file which had all the routes defined in it, and I could use that to create a navigation bar. I guess you can do that in Hugo too, I tried but couldn’t figure our how to give a different class to the active page. But i did find another solution, which is to use Hugo’s own Menu system. Here’s how one can do that. We need to add our pages to the the menu. Let’s say we call out menu &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;. So we will have to add this entry to our front matter of the pages which we want to include in the menu.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: About
layout: page
menu: &quot;main&quot;
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here I have added it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content/about.md&lt;/code&gt; page, I’ll also do the same for my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content/_index.md&lt;/code&gt; page. After that I will consider that these two pages have now been added to an array over which I can iterate. To iterate through that array I can use the following logic in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout/partials/navbar.html&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;nav&amp;gt;
    {{ $currentPage := . }}
    {{ range .Site.Menus.main }}
      &amp;lt;a class=&quot;normal{{if $currentPage.IsMenuCurrent &quot;main&quot; . }} active{{end}}&quot; href=&quot;{{ .URL }}&quot; title=&quot;{{ .Title }}&quot;&amp;gt;{{ .Name }}&amp;lt;/a&amp;gt;
    {{ end }}
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What’s happening here is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; is the current context, when the code starts parsing, the current context is the Page since we have passed it this context when we called the navbar partial by putting a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; at the end of the partial function call. So we assign this value to a variable called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$currentPage&lt;/code&gt; and then we loop over the main menu of the site and then check if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$currentPage&lt;/code&gt; is also the currently selected page in the menu. I do not understand the difference between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IsMenuCurrent&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HasMenuCurrent&lt;/code&gt; which is another method I could have used. However this works perfectly for our usecase, it gives us the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;active&lt;/code&gt; class when the page is currently selected in the navbar. So let’s set some different styling for our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;active&lt;/code&gt; class in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/assets/main.css&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.active {
  color: green;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So anyways, that’s all good in the hood. We have managed to create a working Hugo website without the need for any theme. Although it doesn’t look too good, I believe its in working condition.&lt;/p&gt;

&lt;p&gt;My plan with this website is to style it with Tailwind CSS. I also want to experiment with Notion API, maybe I can write all my content there, and then this website can just use that content instead. Let’s see. I’ll add more blogposts regarding this if I can.&lt;/p&gt;</content><author><name></name></author><summary type="html">I need a website where I can easily write blogposts of the fun projects I do. I want to host it on Github Pages on the subdomain lab.kronaemmanuel.com. The idea being that the page is a collection of all the “experiments” I do. I want to have a website which has the following features: Showcases the various fun little projects that I work on Shows a mini essay that I write while I create the project as a form of documentation of how the project was built.</summary></entry><entry><title type="html">Making Game Of Life</title><link href="/2021/09/03/making-game-of-life.html" rel="alternate" type="text/html" title="Making Game Of Life" /><published>2021-09-03T00:00:00+05:00</published><updated>2021-09-03T00:00:00+05:00</updated><id>/2021/09/03/making-game-of-life</id><content type="html" xml:base="/2021/09/03/making-game-of-life.html">&lt;h1 id=&quot;conways-game-of-life&quot;&gt;Conway’s Game of Life&lt;/h1&gt;

&lt;p&gt;So after being bored for a while, i decided to code a something which has always fascinated me. Conway’s Game of Life.&lt;/p&gt;

&lt;p&gt;Conway’s game of life honestly sounds grander than it looks until you realize that it is one of the best examples of complex emergent behavior coming from simple rules. It truly is wonderful.&lt;/p&gt;

&lt;p&gt;To brush up on my knowledge of Conway’s Game of Life, I went through an &lt;a href=&quot;http://pi.math.cornell.edu/~lipa/mec/lesson6.html&quot;&gt;article&lt;/a&gt; which is a course page from some course taught at Cornell university. I love reading these old school, university course pages. One can imagine some professor coding all these for their students. Thankyou to whoever coded this one.&lt;/p&gt;

&lt;p&gt;Anyways, Conway’s Game of Life is an example of cellular automaton (CA). You can read more about cellular automaton in Chapter 7 of the book &lt;a href=&quot;https://natureofcode.com/&quot;&gt;‘Nature of Code’ by Daniel Shiffman&lt;/a&gt;. I came across this book because I wanted to implement Conway’s Game of Life in &lt;a href=&quot;https://p5js.org/&quot;&gt;P5.js&lt;/a&gt; which is a javascript drawing library. Its a great library, very easy to learn and work with for such projects.&lt;/p&gt;

&lt;p&gt;Well, let’s get started with making Conway’s Game of Life using p5.js library.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-a-grid&quot;&gt;Setting up a grid&lt;/h2&gt;

&lt;p&gt;Our game is played on a two dimensional grid of cells. So let’s make that first. I will start with a square canvas of 600x600 and give it a grayish background.&lt;/p&gt;

&lt;p&gt;P5 has a very simple syntax, I can use the setup function to do all of my setup for the grid, then use the draw function to draw anything I want.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function setup() {
  createCanvas(600, 600);
  background(200);
}

function draw() {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now I can draw a grid of rectangles on this canvas. I’m using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stroke()&lt;/code&gt; function to set the color of the border of each cell, and I’m using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rectangle&lt;/code&gt; function which takes in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rectangle(verticalPosition, horizontalPosition, width, height)&lt;/code&gt; as parameters. A simple double for loop allows me to iterate over the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numberOfRows&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numberOfColumns&lt;/code&gt; which I have calculated in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup()&lt;/code&gt; function. Hence I’m able to show a simple grid of cells.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const cellWidth = 20;
let numOfColumns, numOfRows;

function setup() {
  createCanvas(600, 600);
  background(200);

  numOfColumns = width / cellWidth;
  numOfRows = height / cellWidth;
}

function draw() {
  for (let i = 0; i &amp;lt; numOfRows; i++) {
    for (let j = 0; j &amp;lt; numOfColumns; j++) {
      stroke(0);
      rect(j * cellWidth, i * cellWidth, cellWidth, cellWidth);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we have successfully drawn a grid, but that isn’t all we want to do. We need to track the state of each cell. Now would be a good time to explain how the Game of Life works. We have already discussed that the Game is played on a grid of cells. Each cell in the grid can have two states. Either it will be dead or alive. Now will also be a good time to explain what the rules of the game are.&lt;/p&gt;

&lt;h2 id=&quot;rules-of-game-of-life&quot;&gt;Rules of Game of Life&lt;/h2&gt;
&lt;p&gt;At the start of the game, each cell is given a state of either dead or alive. This initial state can be calculated randomly, or can be explicitly defined.&lt;/p&gt;

&lt;p&gt;Each cell goes through generations, each generation which the cell passes, the cell can change its state, depending on these simple rules:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If a cell is alive, it will die due to:
    &lt;ul&gt;
      &lt;li&gt;Overpopulation: If a cell has four or more neighbours&lt;/li&gt;
      &lt;li&gt;Loneliness: If a cell has one or less neighbours&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If a cell is dead, it will come alive if it has exactly three alive neighbours&lt;/li&gt;
  &lt;li&gt;Otherwise, the cell will remain in the state it already is in.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A cell’s neighbours are the nine cells surrounding it (horizontal, vertical, diagonal).&lt;/p&gt;

&lt;h2 id=&quot;keeping-track-of-state&quot;&gt;Keeping track of state&lt;/h2&gt;
&lt;p&gt;Now that we know that we need to keep track of the state of cells to perform all the calculations to determine their state in the next generation, we need somewhere to keep track of the state. A two dimensional array is perfect for this. We need a two dimensional array of the same size as the grid. To do that, we can do the following:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let grid;

// inside setup()
grid = new Array(numOfColumns);
for (let i = 0; i &amp;lt; numOfColumns; i++) {
  grid[i] = new Array(numOfRows);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s initialize this grid with some random state initially. Just to check if its working or not. I’m using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;random()&lt;/code&gt; function by p5.js library. If I pass in an array to it, it will randomly pick an element from the array, so I can use it to set the initial state to either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alive&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dead&lt;/code&gt;. You might want to put in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1, 0]&lt;/code&gt; or [true, false]` but it doesn’t really matter since this is just a experiment.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for (let x = 0; x &amp;lt; numOfRows; x++) {
  for (let y = 0; y &amp;lt; numOfColumns; y++) {
    grid[x][y] = random([&quot;alive&quot;, &quot;dead&quot;]);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now if you &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log()&lt;/code&gt; the grid, you’ll be able to see that it is filled randomly with either the state alive or dead. Let’s show this on our canvas too. We can edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;draw()&lt;/code&gt; function as follows:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function draw() {
  for (let i = 0; i &amp;lt; numOfRows; i++) {
    for (let j = 0; j &amp;lt; numOfColumns; j++) {
      if (grid[i][j] === &quot;alive&quot;) {
        fill(255);
      } else {
        fill(0);
      }
      stroke(0);
      rect(j * cellWidth, i * cellWidth, cellWidth, cellWidth);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once again, the code itself is very simple. I’m using a simple if else condition to check if the grid cell corresponding to the rectangle being drawn is alive or not. The result is some crossword puzzle looking grid.&lt;/p&gt;

&lt;p&gt;Here is the full code which we have written so far:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const cellWidth = 20;
let numOfColumns, numOfRows;
let grid;

function setup() {
  createCanvas(600, 600);
  background(200);

  numOfColumns = width / cellWidth;
  numOfRows = height / cellWidth;

  grid = new Array(numOfColumns);
  for (let i = 0; i &amp;lt; numOfColumns; i++) {
    grid[i] = new Array(numOfRows);
  }

  for (let x = 0; x &amp;lt; numOfRows; x++) {
    for (let y = 0; y &amp;lt; numOfColumns; y++) {
      grid[x][y] = random([&quot;alive&quot;, &quot;dead&quot;]);
    }
  }
}

function draw() {
  for (let i = 0; i &amp;lt; numOfRows; i++) {
    for (let j = 0; j &amp;lt; numOfColumns; j++) {
      if (grid[i][j] === &quot;alive&quot;) {
        fill(255);
      } else {
        fill(0);
      }
      stroke(0);
      rect(j * cellWidth, i * cellWidth, cellWidth, cellWidth);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Each time I refresh the page, I get a new randomized initial grid. Now that we have completed this, we should get started on calculating the next generation of the grid, so our game can actually start work.&lt;/p&gt;

&lt;h2 id=&quot;going-through-the-agesgenerations&quot;&gt;Going through the Ages(generations)&lt;/h2&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;draw()&lt;/code&gt; function of p5 is constantly executing the code in it. So if just put a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createNextGeneration()&lt;/code&gt; function (which changes the grid to the grid containing the next generation) on the top before we draw our grid, we can create an animation in which the Game of Life is being played.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function draw() {
  createNextGeneration();
  for (let i = 0; i &amp;lt; numOfRows; i++) {
    for (let j = 0; j &amp;lt; numOfColumns; j++) {
      if (grid[i][j] === &quot;alive&quot;) {
        fill(255);
      } else {
        fill(0);
      }
      stroke(0);
      rect(j * cellWidth, i * cellWidth, cellWidth, cellWidth);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We still haven’t made this function yet, so let’s do this below (outside, not inside) our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;draw()&lt;/code&gt; function. We will also need a variable to hold the next grid. We will declare it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nextGrid&lt;/code&gt; at the top of our code along with all other global variables. We should also initialize it as a two dimensional array the same way as we did our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grid&lt;/code&gt; array. Since this will create duplicated code, we will extract the code into a function and avoid code duplication.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let nextGrid;

function create2dArray(rows, columns) {
  let array = new Array(columns);
  for (let i = 0; i &amp;lt; columns; i++) {
    array[i] = new Array(rows);
  }
  return array;
}

function setup() {
  //...

  grid = create2dArray(numOfRows, numOfColumns);
  next = create2dArray(numOfRows, numOfColumns);

  //...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Coming back to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createNextGeneration()&lt;/code&gt; function. Let’s create that now, this is the confusing part in this whole project, but let’s go through it by breaking it down into simpler problems.
We need to implement the rules of the game. I’ve already described the rules above, and it seems like to get the next state of each cell, first we need to get information about the neighbours of the cell. So let’s make a function which accepts a cell as an input and gives us the states of its neighbours as an output. Since the rest of the decisions are based on how many of those neighbours are dead or alive, so its a good idea to get just the neighbours first.&lt;/p&gt;

&lt;p&gt;I implemented the function like this, it checks all cells in the square of surrounding cells. The first if statement is to check whether the array element being accessed is valid or not, since our 2D array only has elements of index &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numOfColumns/numOfRows&amp;gt;i&amp;gt;=0&lt;/code&gt;, so we shouldn’t run the code for invalid array indexes to avoid errors. It just has one other if statement check so that a cell doesn’t end up counting itself as its own neighbour.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function getNeighbours(columnPosition, rowPosition) {
  let neighbours = [];

  for (let x = columnPosition - 1; x &amp;lt;= columnPosition + 1; x++) {
    for (let y = rowPosition - 1; y &amp;lt;= rowPosition + 1; y++) {
      if (x &amp;gt;= 0 &amp;amp;&amp;amp; y &amp;gt;= 0 &amp;amp;&amp;amp; x &amp;lt; numOfColumns &amp;amp;&amp;amp; y &amp;lt; numOfRows) {
        if (!(x == columnPosition &amp;amp;&amp;amp; y == rowPosition)) {
          neighbours.push(grid[x][y]);
        }
      }
    }
  }

  return neighbours;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now that we have the neighbours of a cell, we can easilly implement the rules of the game itself. Let’s do that in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createNextGeneration&lt;/code&gt; function. We want to implement the next state of the grid on our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nextGrid&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;We can simplify the rules a bit as:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;If a cell has one or less neighbours alive, it will be dead in the next generation.&lt;/li&gt;
  &lt;li&gt;If a cell has 2 alive neighbours, its next generation will be the same as the current generation.&lt;/li&gt;
  &lt;li&gt;If a cell has 3 alive neighbours, it will be alive next generation.&lt;/li&gt;
  &lt;li&gt;If a cell has four or more neighbours alive, it will be dead in the next generation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we can make a simple double for loop to iterate over all the cells and we can implement these 4 rules as simple if statements.&lt;/p&gt;

&lt;p&gt;Here I have implemented the above 4 rules in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createNextGeneration()&lt;/code&gt; function. At the end of the function, I have also swapped the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nextGrid&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grid&lt;/code&gt;, so it will be updated the next time the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;draw()&lt;/code&gt; function runs.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function createNextGeneration() {
  for (let i = 0; i &amp;lt; numOfColumns; i++) {
    for (let j = 0; j &amp;lt; numOfRows; j++) {
      let neighbours = getNeighbours(i, j);
      let aliveNeighbours = neighbours.filter(
        (neighbour) =&amp;gt; neighbour === &quot;alive&quot;
      ).length;

      if (aliveNeighbours &amp;lt;= 1) {
        nextGrid[i][j] = &quot;dead&quot;;
      } else if (aliveNeighbours === 2) {
        nextGrid[i][j] = grid[i][j];
      } else if (aliveNeighbours === 3) {
        nextGrid[i][j] = &quot;alive&quot;;
      } else {
        nextGrid[i][j] = &quot;dead&quot;;
      }
    }
  }

  let temp = grid;
  grid = nextGrid;
  nextGrid = temp;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I’m using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.filter()&lt;/code&gt; method to get all alive neighbours of a cell, and then getting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.length()&lt;/code&gt; of that array to get information of how many alive neighbours a cell has.&lt;/p&gt;

&lt;p&gt;Here is the full code that we have so far:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const cellWidth = 20;
let numOfColumns, numOfRows;
let grid;
let nextGrid;

function setup() {
  createCanvas(600, 600);
  background(200);

  numOfColumns = width / cellWidth;
  numOfRows = height / cellWidth;

  grid = create2dArray(numOfRows, numOfColumns);
  nextGrid = create2dArray(numOfRows, numOfColumns);

  for (let x = 0; x &amp;lt; numOfColumns; x++) {
    for (let y = 0; y &amp;lt; numOfRows; y++) {
      grid[x][y] = random([&quot;alive&quot;, &quot;dead&quot;]);
    }
  }
}

function draw() {
  createNextGeneration();
  for (let i = 0; i &amp;lt; numOfColumns; i++) {
    for (let j = 0; j &amp;lt; numOfRows; j++) {
      if (grid[i][j] === &quot;alive&quot;) {
        fill(0);
      } else {
        fill(255);
      }
      stroke(0);
      rect(j * cellWidth, i * cellWidth, cellWidth, cellWidth);
    }
  }
}

function create2dArray(rows, columns) {
  let array = new Array(columns);
  for (let i = 0; i &amp;lt; columns; i++) {
    array[i] = new Array(rows);
  }
  return array;
}

function createNextGeneration() {
  for (let i = 0; i &amp;lt; numOfColumns; i++) {
    for (let j = 0; j &amp;lt; numOfRows; j++) {
      let neighbours = getNeighbours(i, j);
      let aliveNeighbours = neighbours.filter(
        (neighbour) =&amp;gt; neighbour === &quot;alive&quot;
      ).length;

      if (aliveNeighbours &amp;lt;= 1) {
        nextGrid[i][j] = &quot;dead&quot;;
      } else if (aliveNeighbours === 2) {
        nextGrid[i][j] = grid[i][j];
      } else if (aliveNeighbours === 3) {
        nextGrid[i][j] = &quot;alive&quot;;
      } else {
        nextGrid[i][j] = &quot;dead&quot;;
      }
    }
  }

  let temp = grid;
  grid = nextGrid;
  nextGrid = temp;
}

function getNeighbours(columnPosition, rowPosition) {
  let neighbours = [];

  for (let x = columnPosition - 1; x &amp;lt;= columnPosition + 1; x++) {
    for (let y = rowPosition - 1; y &amp;lt;= rowPosition + 1; y++) {
      if (x &amp;gt;= 0 &amp;amp;&amp;amp; y &amp;gt;= 0 &amp;amp;&amp;amp; x &amp;lt; numOfColumns &amp;amp;&amp;amp; y &amp;lt; numOfRows) {
        if (!(x == columnPosition &amp;amp;&amp;amp; y == rowPosition)) {
          neighbours.push(grid[x][y]);
        }
      }
    }
  }

  return neighbours;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This gives us a working Conway’s Game of Life on a 30x30 grid.&lt;/p&gt;

&lt;h2 id=&quot;small-enhancement&quot;&gt;Small Enhancement&lt;/h2&gt;
&lt;p&gt;Doing so many calculations can be CPU intensive and we really do not need that many frames to always be calculated. Hence I’m limiting the framerate to be 30 frames per second. I can do this by putting the following line in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;framerate(30)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;check-the-project&quot;&gt;Check the Project&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kronaemmanuel.com/game_of_life/&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kronaemmanuel/game_of_life&quot;&gt;Repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lessons-learnt&quot;&gt;Lessons Learnt:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;p5.js is a really wonderful and easy to use library for such small projects where you’re not worried about things like &lt;a href=&quot;https://bundlephobia.com/package/p5@1.4.0&quot;&gt;bundle size&lt;/a&gt;, performance, etc. The syntax is really easy to use, and this should definitely be used to teach beginners how to code.&lt;/li&gt;
  &lt;li&gt;It is possible to make a semi-cool project in a few hours, I should do this more often as it is a very rewarding to see things actually working.&lt;/li&gt;
  &lt;li&gt;Documenting the process as you go through it, makes the process much easier. For example, I wrote this post as I was making the project, this means I could copy the latest code into my post as I wrote it. Makes things very easy.&lt;/li&gt;
  &lt;li&gt;I really need to start using an online service such as Contentful or at least Jekyll Admin to write these blogposts. I didn’t include images, gifs in this post as I knew I would have to bring them into my repo and then include them.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>krona</name></author><summary type="html">Conway’s Game of Life</summary></entry><entry><title type="html">Making A Simple Animation In Liquid</title><link href="/2021/09/01/making-a-simple-animation-in-liquid.html" rel="alternate" type="text/html" title="Making A Simple Animation In Liquid" /><published>2021-09-01T00:00:00+05:00</published><updated>2021-09-01T00:00:00+05:00</updated><id>/2021/09/01/making-a-simple-animation-in-liquid</id><content type="html" xml:base="/2021/09/01/making-a-simple-animation-in-liquid.html">&lt;p&gt;I was going to write a post about how great &lt;a href=&quot;https://github.com/tailwindlabs/tailwindcss-typography&quot;&gt;Tailwind Typography&lt;/a&gt; is because all I had to do to style my website was add two classes:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class&quot;prose prose-red&quot;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But after doing that little bit of work, I thought to myself:
“Oh, let’s make a “loading…” bouncing text animation for my website since a lot of stuff is still work in progress”&lt;/p&gt;

&lt;p&gt;Seems pretty simple right? Wrong.&lt;/p&gt;

&lt;p&gt;It would have been wayyyyy more simpler had I been using some other framework, but since this is Jekyll, which uses Liquid, it was much harder than it should have been. There are two main factors for this:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Finding documentation for liquid is much harder than for regular languages. I had to resort to guides and answers written for Shopify users to find my answers. The official documentation is really bad.&lt;/li&gt;
  &lt;li&gt;I have no idea how to include javascript or css right into my main file. I know they had &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;script&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;style&lt;/code&gt; tags in shopify, but those dont work in Jekyll&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can checkout &lt;a href=&quot;https://github.com/kronaemmanuel/kronaemmanuel.github.io/commit/1a4acbb48e656c0320912202f66272800a73b193&quot;&gt;this commit&lt;/a&gt; to checkout the liquid code which splits a word into letters, then applies a dynamic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;animation-duration&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;animation-delay&lt;/code&gt; to each letter.&lt;/p&gt;

&lt;p&gt;and here’s the final result:&lt;/p&gt;

&lt;div class=&quot;bouncing justify-center text-red-600 font-press-start&quot;&gt;
  
  
    &lt;div class=&quot;bouncing_letter&quot; style=&quot;animation-delay: 0s; animation-duration: 2.3s&quot;&gt;B&lt;/div&gt;
    
  
    &lt;div class=&quot;bouncing_letter&quot; style=&quot;animation-delay: 0.2s; animation-duration: 2.3s&quot;&gt;l&lt;/div&gt;
    
  
    &lt;div class=&quot;bouncing_letter&quot; style=&quot;animation-delay: 0.4s; animation-duration: 2.3s&quot;&gt;a&lt;/div&gt;
    
  
    &lt;div class=&quot;bouncing_letter&quot; style=&quot;animation-delay: 0.6s; animation-duration: 2.3s&quot;&gt;B&lt;/div&gt;
    
  
    &lt;div class=&quot;bouncing_letter&quot; style=&quot;animation-delay: 0.8s; animation-duration: 2.3s&quot;&gt;l&lt;/div&gt;
    
  
    &lt;div class=&quot;bouncing_letter&quot; style=&quot;animation-delay: 1.0s; animation-duration: 2.3s&quot;&gt;a&lt;/div&gt;
    
  
    &lt;div class=&quot;bouncing_letter&quot; style=&quot;animation-delay: 1.2s; animation-duration: 2.3s&quot;&gt;B&lt;/div&gt;
    
  
    &lt;div class=&quot;bouncing_letter&quot; style=&quot;animation-delay: 1.4s; animation-duration: 2.3s&quot;&gt;l&lt;/div&gt;
    
  
    &lt;div class=&quot;bouncing_letter&quot; style=&quot;animation-delay: 1.6s; animation-duration: 2.3s&quot;&gt;a&lt;/div&gt;
    
  
&lt;/div&gt;

&lt;p&gt;and if you aren’t reading this post too much in the future, you might see a similar animation down below, don’t worry, it will be removed soon enough.&lt;/p&gt;</content><author><name>krona</name></author><summary type="html">I was going to write a post about how great Tailwind Typography is because all I had to do to style my website was add two classes: &amp;lt;div class&quot;prose prose-red&quot;&amp;gt; &amp;lt;/div&amp;gt;</summary></entry><entry><title type="html">Making Github Actions Work</title><link href="/2021/08/26/making-github-actions-work.html" rel="alternate" type="text/html" title="Making Github Actions Work" /><published>2021-08-26T00:00:00+05:00</published><updated>2021-08-26T00:00:00+05:00</updated><id>/2021/08/26/making-github-actions-work</id><content type="html" xml:base="/2021/08/26/making-github-actions-work.html">&lt;p&gt;After finishing my tailwind blogpost yesterday, I realized that it didn’t actually publish and that my github action setup to deploy the websitewasn’t working. I had followed the &lt;a href=&quot;https://jekyllrb.com/docs/continuous-integration/github-actions/&quot;&gt;guide&lt;/a&gt; on Jekyll’s own website to make the github action, but it wasn’t working.&lt;/p&gt;

&lt;p&gt;I quickly realized that the action I had created didn’t support npm or Node. So I had to set that up myself, after trying it and failing too many times, I finally hit a vein of gold. I found this &lt;a href=&quot;https://githubmemory.com/repo/mhanberg/jekyll-postcss/issues/20&quot;&gt;issue&lt;/a&gt; by a lovely person named DavidUnzue. He was facing the exact same issue that I was facing, so I’m not describe the issue in detail here. Anyways, someone else and him had figured out how to solve it. And I followed his advice of using a &lt;a href=&quot;https://github.com/limjh16/jekyll-action-ts&quot;&gt;different&lt;/a&gt; github action and also running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install&lt;/code&gt; before it. And voila! My &lt;a href=&quot;https://github.com/kronaemmanuel/kronaemmanuel.github.io/actions/runs/1168075987&quot;&gt;github action&lt;/a&gt; started working! You can check out the github action history before the linked action to see all the times I failed. 15 times to be exact.&lt;/p&gt;

&lt;p&gt;Anyways, I realized that I had much to learn about github actions, and even more to learn about docker.&lt;/p&gt;</content><author><name>krona</name></author><summary type="html">After finishing my tailwind blogpost yesterday, I realized that it didn’t actually publish and that my github action setup to deploy the websitewasn’t working. I had followed the guide on Jekyll’s own website to make the github action, but it wasn’t working.</summary></entry><entry><title type="html">Tailwind Blunders</title><link href="/2021/08/25/tailwind-blunders.html" rel="alternate" type="text/html" title="Tailwind Blunders" /><published>2021-08-25T00:00:00+05:00</published><updated>2021-08-25T00:00:00+05:00</updated><id>/2021/08/25/tailwind-blunders</id><content type="html" xml:base="/2021/08/25/tailwind-blunders.html">&lt;p&gt;So I’m trying to setup my tailwindcss to work properly and I’m constantly getting this error:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Conversion error: Jekyll::Converters::Scss encountered an error while converting &apos;assets/css/styles.scss&apos;:
  Error: unterminated attribute selector for type on line 632:16 of styles.scss &amp;gt;&amp;gt; .prose ol[type=&quot;A&quot; s] { ---------------^
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And I wasn’t sure why I was getting this error. But then I compared my code to the repo of the guide I was following to do this by &lt;a href=&quot;https://katiekodes.com/jekyll-tailwind&quot;&gt;Katie Kodes&lt;/a&gt;. I realized that the Katie was importing the tailwind styles into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.css&lt;/code&gt; file while I was doing it in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.scss&lt;/code&gt;. So I changed my extension from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.scss&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.css&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Also, I found this &lt;a href=&quot;https://stackoverflow.com/questions/68898511/tailwindcss-typography-sasscsyntaxerror-error-unterminated-attribute-select/68898512#68898512&quot;&gt;Stack Overflow issue&lt;/a&gt; which was the same as mine. The guy who wrote the question answered his own question and reasoned that “this new syntax for CSS rules is not supported by libsass / sassc.” so hence the error.&lt;/p&gt;

&lt;p&gt;Well, I tried to understand what this meant and found this:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;I thought that the issue was with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[type=&quot;A&quot; s]&lt;/code&gt; part, maybe that was something new in the CSS Spec (I haven’t seen this syntax before). And maybe this wasn’t handled by Scss yet. However, the CSS attribute selector of the type: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.prose ol[type=&quot;A&quot; s]&lt;/code&gt; have been around since 2018. These &lt;a href=&quot;https://www.w3.org/TR/selectors-4/&quot;&gt;specs&lt;/a&gt; were last updated in 2018. So I guess it’s not that issue.&lt;/li&gt;
  &lt;li&gt;I also created a &lt;a href=&quot;https://codepen.io/StoryMode/pen/XWgJmrj&quot;&gt;Codepen&lt;/a&gt; to see if Scss created this error in a setup other than Jekyll. I set SCSS as my CSS preprocessor in it. However, it didn’t cause any errors, and worked.&lt;/li&gt;
  &lt;li&gt;The Stack Overflow guy had mentioned “libsass” and “sassc”. I found that LibSass was &lt;a href=&quot;https://sass-lang.com/blog/libsass-is-deprecated&quot;&gt;deprecated&lt;/a&gt; from the Sass’s blog. Also found that they now use Dart Sass, which was surprising to me, I didn’t know that Sass was using Dart. Go Dart!&lt;/li&gt;
  &lt;li&gt;Another thing that made me curious is that the error is about the selector being unterminated. I switched the preprocessor in my Codepen from &lt;a href=&quot;https://codepen.io/StoryMode/pen/OJgPyyd&quot;&gt;Scss to Sass&lt;/a&gt;, and it gave me an error, that it was expecting a end of line. Ofcourse it did, Sass does away with the squiggly braces, so ofcourse it gave me that error. Which makes me think, does jekyll use Sass or does it use Scss? 🤔 In the error message I see that the error is created by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jekyll::Converters:Scss&lt;/code&gt; which I guess means that its an Scss compiler, but then why would it not parse valid CSS code. Anywho, that’s as far as I’m gonna pursue this. Its late, I should be asleep by now.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Edit: Nevermind I found the reason why this wasn’t working. You can read all about it &lt;a href=&quot;https://github.com/jekyll/jekyll-sass-converter/issues/120#issuecomment-889739369&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</content><author><name>krona</name></author><summary type="html">So I’m trying to setup my tailwindcss to work properly and I’m constantly getting this error: Conversion error: Jekyll::Converters::Scss encountered an error while converting &apos;assets/css/styles.scss&apos;: Error: unterminated attribute selector for type on line 632:16 of styles.scss &amp;gt;&amp;gt; .prose ol[type=&quot;A&quot; s] { ---------------^</summary></entry></feed>