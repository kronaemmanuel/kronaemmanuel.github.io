<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-09-07T01:38:48+05:00</updated><id>/feed.xml</id><entry><title type="html">Trying various CMS(s) with my Jekyll website</title><link href="/2021/09/07/CMS-for-jekyll.html" rel="alternate" type="text/html" title="Trying various CMS(s) with my Jekyll website" /><published>2021-09-07T00:00:00+05:00</published><updated>2021-09-07T00:00:00+05:00</updated><id>/2021/09/07/CMS-for-jekyll</id><content type="html" xml:base="/2021/09/07/CMS-for-jekyll.html">&lt;p&gt;Alright, so tbh, I kinda hate Jekyll, it just seems too old. I guess Eleventy, Hugo, Gatsby are way better for generating static websites. But anyways, I came to Jekyll because I wanted to experience something other than javascript.&lt;/p&gt;

&lt;p&gt;In my last post, I discovered that I couldn’t easily put images etc. into my blogpost and hence was unable to explain or show some things that I would have wanted to. So to solve that issue, I tried three things.&lt;/p&gt;
&lt;h2 id=&quot;contentful&quot;&gt;Contentful&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.contentful.com/&quot;&gt;Contentful&lt;/a&gt; is a service which allows you to manage a headless CMS which your static site generator (such as Jekyll) can use to pull in data. I found the following useful links about how I could use Contentful with my website, however, I eventually gave up on trying to use it.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://katiekodes.com/jekyll-api-headless-cms/&quot;&gt;Katie Kodes’ article&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/contentful/jekyll-contentful-data-import&quot;&gt;Contentful’s jekyll plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;netlify-cms&quot;&gt;Netlify CMS&lt;/h2&gt;
&lt;p&gt;The great Netlify had way better docs and guidance than Contentful, but I didn’t wanna switch over my blog to netlify because I was already using it for some other websites and wanted to get more accustomed to Github Pages and Github Actions. Here are some useful links tho:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.netlifycms.org/docs/jekyll/&quot;&gt;Netlify CMS Jekyll Docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.netlifycms.org/docs/add-to-your-site&quot;&gt;Netfliy CMS General Add to Site Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;jekyll-admin&quot;&gt;Jekyll Admin&lt;/h2&gt;
&lt;p&gt;After trying my luck with both CMSs above, I remembered that I had come across Jekyll Admin &lt;a href=&quot;https://github.com/jekyll/jekyll-admin/&quot;&gt;repo&lt;/a&gt; when I was browsing the Jekyll organization on github once. So I decided to give it a go. It seems pretty simple to use and also fulfills all my requirements. Although there is one requirement that I want to still test. Does it allow me to put in images without any effort? Let’s test it rn.&lt;/p&gt;

&lt;p&gt;And no, we can’t add it easilly. So I guess this whole thing was a failure. Follow me for more disappointing experiences like this 🥲&lt;/p&gt;</content><author><name></name></author><summary type="html">Alright, so tbh, I kinda hate Jekyll, it just seems too old. I guess Eleventy, Hugo, Gatsby are way better for generating static websites. But anyways, I came to Jekyll because I wanted to experience something other than javascript.</summary></entry><entry><title type="html">Making Game Of Life</title><link href="/2021/09/03/making-game-of-life.html" rel="alternate" type="text/html" title="Making Game Of Life" /><published>2021-09-03T00:00:00+05:00</published><updated>2021-09-03T00:00:00+05:00</updated><id>/2021/09/03/making-game-of-life</id><content type="html" xml:base="/2021/09/03/making-game-of-life.html">&lt;h1 id=&quot;conways-game-of-life&quot;&gt;Conway’s Game of Life&lt;/h1&gt;

&lt;p&gt;So after being bored for a while, i decided to code a something which has always fascinated me. Conway’s Game of Life.&lt;/p&gt;

&lt;p&gt;Conway’s game of life honestly sounds grander than it looks until you realize that it is one of the best examples of complex emergent behavior coming from simple rules. It truly is wonderful.&lt;/p&gt;

&lt;p&gt;To brush up on my knowledge of Conway’s Game of Life, I went through an &lt;a href=&quot;http://pi.math.cornell.edu/~lipa/mec/lesson6.html&quot;&gt;article&lt;/a&gt; which is a course page from some course taught at Cornell university. I love reading these old school, university course pages. One can imagine some professor coding all these for their students. Thankyou to whoever coded this one.&lt;/p&gt;

&lt;p&gt;Anyways, Conway’s Game of Life is an example of cellular automaton (CA). You can read more about cellular automaton in Chapter 7 of the book &lt;a href=&quot;https://natureofcode.com/&quot;&gt;‘Nature of Code’ by Daniel Shiffman&lt;/a&gt;. I came across this book because I wanted to implement Conway’s Game of Life in &lt;a href=&quot;https://p5js.org/&quot;&gt;P5.js&lt;/a&gt; which is a javascript drawing library. Its a great library, very easy to learn and work with for such projects.&lt;/p&gt;

&lt;p&gt;Well, let’s get started with making Conway’s Game of Life using p5.js library.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-a-grid&quot;&gt;Setting up a grid&lt;/h2&gt;

&lt;p&gt;Our game is played on a two dimensional grid of cells. So let’s make that first. I will start with a square canvas of 600x600 and give it a grayish background.&lt;/p&gt;

&lt;p&gt;P5 has a very simple syntax, I can use the setup function to do all of my setup for the grid, then use the draw function to draw anything I want.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function setup() {
  createCanvas(600, 600);
  background(200);
}

function draw() {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now I can draw a grid of rectangles on this canvas. I’m using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stroke()&lt;/code&gt; function to set the color of the border of each cell, and I’m using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rectangle&lt;/code&gt; function which takes in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rectangle(verticalPosition, horizontalPosition, width, height)&lt;/code&gt; as parameters. A simple double for loop allows me to iterate over the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numberOfRows&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numberOfColumns&lt;/code&gt; which I have calculated in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup()&lt;/code&gt; function. Hence I’m able to show a simple grid of cells.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const cellWidth = 20;
let numOfColumns, numOfRows;

function setup() {
  createCanvas(600, 600);
  background(200);

  numOfColumns = width / cellWidth;
  numOfRows = height / cellWidth;
}

function draw() {
  for (let i = 0; i &amp;lt; numOfRows; i++) {
    for (let j = 0; j &amp;lt; numOfColumns; j++) {
      stroke(0);
      rect(j * cellWidth, i * cellWidth, cellWidth, cellWidth);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we have successfully drawn a grid, but that isn’t all we want to do. We need to track the state of each cell. Now would be a good time to explain how the Game of Life works. We have already discussed that the Game is played on a grid of cells. Each cell in the grid can have two states. Either it will be dead or alive. Now will also be a good time to explain what the rules of the game are.&lt;/p&gt;

&lt;h2 id=&quot;rules-of-game-of-life&quot;&gt;Rules of Game of Life&lt;/h2&gt;
&lt;p&gt;At the start of the game, each cell is given a state of either dead or alive. This initial state can be calculated randomly, or can be explicitly defined.&lt;/p&gt;

&lt;p&gt;Each cell goes through generations, each generation which the cell passes, the cell can change its state, depending on these simple rules:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If a cell is alive, it will die due to:
    &lt;ul&gt;
      &lt;li&gt;Overpopulation: If a cell has four or more neighbours&lt;/li&gt;
      &lt;li&gt;Loneliness: If a cell has one or less neighbours&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If a cell is dead, it will come alive if it has exactly three alive neighbours&lt;/li&gt;
  &lt;li&gt;Otherwise, the cell will remain in the state it already is in.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A cell’s neighbours are the nine cells surrounding it (horizontal, vertical, diagonal).&lt;/p&gt;

&lt;h2 id=&quot;keeping-track-of-state&quot;&gt;Keeping track of state&lt;/h2&gt;
&lt;p&gt;Now that we know that we need to keep track of the state of cells to perform all the calculations to determine their state in the next generation, we need somewhere to keep track of the state. A two dimensional array is perfect for this. We need a two dimensional array of the same size as the grid. To do that, we can do the following:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let grid;

// inside setup()
grid = new Array(numOfColumns);
for (let i = 0; i &amp;lt; numOfColumns; i++) {
  grid[i] = new Array(numOfRows);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s initialize this grid with some random state initially. Just to check if its working or not. I’m using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;random()&lt;/code&gt; function by p5.js library. If I pass in an array to it, it will randomly pick an element from the array, so I can use it to set the initial state to either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alive&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dead&lt;/code&gt;. You might want to put in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1, 0]&lt;/code&gt; or [true, false]` but it doesn’t really matter since this is just a experiment.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for (let x = 0; x &amp;lt; numOfRows; x++) {
  for (let y = 0; y &amp;lt; numOfColumns; y++) {
    grid[x][y] = random([&quot;alive&quot;, &quot;dead&quot;]);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now if you &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log()&lt;/code&gt; the grid, you’ll be able to see that it is filled randomly with either the state alive or dead. Let’s show this on our canvas too. We can edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;draw()&lt;/code&gt; function as follows:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function draw() {
  for (let i = 0; i &amp;lt; numOfRows; i++) {
    for (let j = 0; j &amp;lt; numOfColumns; j++) {
      if (grid[i][j] === &quot;alive&quot;) {
        fill(255);
      } else {
        fill(0);
      }
      stroke(0);
      rect(j * cellWidth, i * cellWidth, cellWidth, cellWidth);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once again, the code itself is very simple. I’m using a simple if else condition to check if the grid cell corresponding to the rectangle being drawn is alive or not. The result is some crossword puzzle looking grid.&lt;/p&gt;

&lt;p&gt;Here is the full code which we have written so far:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const cellWidth = 20;
let numOfColumns, numOfRows;
let grid;

function setup() {
  createCanvas(600, 600);
  background(200);

  numOfColumns = width / cellWidth;
  numOfRows = height / cellWidth;

  grid = new Array(numOfColumns);
  for (let i = 0; i &amp;lt; numOfColumns; i++) {
    grid[i] = new Array(numOfRows);
  }

  for (let x = 0; x &amp;lt; numOfRows; x++) {
    for (let y = 0; y &amp;lt; numOfColumns; y++) {
      grid[x][y] = random([&quot;alive&quot;, &quot;dead&quot;]);
    }
  }
}

function draw() {
  for (let i = 0; i &amp;lt; numOfRows; i++) {
    for (let j = 0; j &amp;lt; numOfColumns; j++) {
      if (grid[i][j] === &quot;alive&quot;) {
        fill(255);
      } else {
        fill(0);
      }
      stroke(0);
      rect(j * cellWidth, i * cellWidth, cellWidth, cellWidth);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Each time I refresh the page, I get a new randomized initial grid. Now that we have completed this, we should get started on calculating the next generation of the grid, so our game can actually start work.&lt;/p&gt;

&lt;h2 id=&quot;going-through-the-agesgenerations&quot;&gt;Going through the Ages(generations)&lt;/h2&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;draw()&lt;/code&gt; function of p5 is constantly executing the code in it. So if just put a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createNextGeneration()&lt;/code&gt; function (which changes the grid to the grid containing the next generation) on the top before we draw our grid, we can create an animation in which the Game of Life is being played.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function draw() {
  createNextGeneration();
  for (let i = 0; i &amp;lt; numOfRows; i++) {
    for (let j = 0; j &amp;lt; numOfColumns; j++) {
      if (grid[i][j] === &quot;alive&quot;) {
        fill(255);
      } else {
        fill(0);
      }
      stroke(0);
      rect(j * cellWidth, i * cellWidth, cellWidth, cellWidth);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We still haven’t made this function yet, so let’s do this below (outside, not inside) our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;draw()&lt;/code&gt; function. We will also need a variable to hold the next grid. We will declare it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nextGrid&lt;/code&gt; at the top of our code along with all other global variables. We should also initialize it as a two dimensional array the same way as we did our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grid&lt;/code&gt; array. Since this will create duplicated code, we will extract the code into a function and avoid code duplication.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let nextGrid;

function create2dArray(rows, columns) {
  let array = new Array(columns);
  for (let i = 0; i &amp;lt; columns; i++) {
    array[i] = new Array(rows);
  }
  return array;
}

function setup() {
  //...

  grid = create2dArray(numOfRows, numOfColumns);
  next = create2dArray(numOfRows, numOfColumns);

  //...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Coming back to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createNextGeneration()&lt;/code&gt; function. Let’s create that now, this is the confusing part in this whole project, but let’s go through it by breaking it down into simpler problems.
We need to implement the rules of the game. I’ve already described the rules above, and it seems like to get the next state of each cell, first we need to get information about the neighbours of the cell. So let’s make a function which accepts a cell as an input and gives us the states of its neighbours as an output. Since the rest of the decisions are based on how many of those neighbours are dead or alive, so its a good idea to get just the neighbours first.&lt;/p&gt;

&lt;p&gt;I implemented the function like this, it checks all cells in the square of surrounding cells. The first if statement is to check whether the array element being accessed is valid or not, since our 2D array only has elements of index &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numOfColumns/numOfRows&amp;gt;i&amp;gt;=0&lt;/code&gt;, so we shouldn’t run the code for invalid array indexes to avoid errors. It just has one other if statement check so that a cell doesn’t end up counting itself as its own neighbour.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function getNeighbours(columnPosition, rowPosition) {
  let neighbours = [];

  for (let x = columnPosition - 1; x &amp;lt;= columnPosition + 1; x++) {
    for (let y = rowPosition - 1; y &amp;lt;= rowPosition + 1; y++) {
      if (x &amp;gt;= 0 &amp;amp;&amp;amp; y &amp;gt;= 0 &amp;amp;&amp;amp; x &amp;lt; numOfColumns &amp;amp;&amp;amp; y &amp;lt; numOfRows) {
        if (!(x == columnPosition &amp;amp;&amp;amp; y == rowPosition)) {
          neighbours.push(grid[x][y]);
        }
      }
    }
  }

  return neighbours;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now that we have the neighbours of a cell, we can easilly implement the rules of the game itself. Let’s do that in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createNextGeneration&lt;/code&gt; function. We want to implement the next state of the grid on our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nextGrid&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;We can simplify the rules a bit as:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;If a cell has one or less neighbours alive, it will be dead in the next generation.&lt;/li&gt;
  &lt;li&gt;If a cell has 2 alive neighbours, its next generation will be the same as the current generation.&lt;/li&gt;
  &lt;li&gt;If a cell has 3 alive neighbours, it will be alive next generation.&lt;/li&gt;
  &lt;li&gt;If a cell has four or more neighbours alive, it will be dead in the next generation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we can make a simple double for loop to iterate over all the cells and we can implement these 4 rules as simple if statements.&lt;/p&gt;

&lt;p&gt;Here I have implemented the above 4 rules in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createNextGeneration()&lt;/code&gt; function. At the end of the function, I have also swapped the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nextGrid&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grid&lt;/code&gt;, so it will be updated the next time the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;draw()&lt;/code&gt; function runs.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function createNextGeneration() {
  for (let i = 0; i &amp;lt; numOfColumns; i++) {
    for (let j = 0; j &amp;lt; numOfRows; j++) {
      let neighbours = getNeighbours(i, j);
      let aliveNeighbours = neighbours.filter(
        (neighbour) =&amp;gt; neighbour === &quot;alive&quot;
      ).length;

      if (aliveNeighbours &amp;lt;= 1) {
        nextGrid[i][j] = &quot;dead&quot;;
      } else if (aliveNeighbours === 2) {
        nextGrid[i][j] = grid[i][j];
      } else if (aliveNeighbours === 3) {
        nextGrid[i][j] = &quot;alive&quot;;
      } else {
        nextGrid[i][j] = &quot;dead&quot;;
      }
    }
  }

  let temp = grid;
  grid = nextGrid;
  nextGrid = temp;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I’m using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.filter()&lt;/code&gt; method to get all alive neighbours of a cell, and then getting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.length()&lt;/code&gt; of that array to get information of how many alive neighbours a cell has.&lt;/p&gt;

&lt;p&gt;Here is the full code that we have so far:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const cellWidth = 20;
let numOfColumns, numOfRows;
let grid;
let nextGrid;

function setup() {
  createCanvas(600, 600);
  background(200);

  numOfColumns = width / cellWidth;
  numOfRows = height / cellWidth;

  grid = create2dArray(numOfRows, numOfColumns);
  nextGrid = create2dArray(numOfRows, numOfColumns);

  for (let x = 0; x &amp;lt; numOfColumns; x++) {
    for (let y = 0; y &amp;lt; numOfRows; y++) {
      grid[x][y] = random([&quot;alive&quot;, &quot;dead&quot;]);
    }
  }
}

function draw() {
  createNextGeneration();
  for (let i = 0; i &amp;lt; numOfColumns; i++) {
    for (let j = 0; j &amp;lt; numOfRows; j++) {
      if (grid[i][j] === &quot;alive&quot;) {
        fill(0);
      } else {
        fill(255);
      }
      stroke(0);
      rect(j * cellWidth, i * cellWidth, cellWidth, cellWidth);
    }
  }
}

function create2dArray(rows, columns) {
  let array = new Array(columns);
  for (let i = 0; i &amp;lt; columns; i++) {
    array[i] = new Array(rows);
  }
  return array;
}

function createNextGeneration() {
  for (let i = 0; i &amp;lt; numOfColumns; i++) {
    for (let j = 0; j &amp;lt; numOfRows; j++) {
      let neighbours = getNeighbours(i, j);
      let aliveNeighbours = neighbours.filter(
        (neighbour) =&amp;gt; neighbour === &quot;alive&quot;
      ).length;

      if (aliveNeighbours &amp;lt;= 1) {
        nextGrid[i][j] = &quot;dead&quot;;
      } else if (aliveNeighbours === 2) {
        nextGrid[i][j] = grid[i][j];
      } else if (aliveNeighbours === 3) {
        nextGrid[i][j] = &quot;alive&quot;;
      } else {
        nextGrid[i][j] = &quot;dead&quot;;
      }
    }
  }

  let temp = grid;
  grid = nextGrid;
  nextGrid = temp;
}

function getNeighbours(columnPosition, rowPosition) {
  let neighbours = [];

  for (let x = columnPosition - 1; x &amp;lt;= columnPosition + 1; x++) {
    for (let y = rowPosition - 1; y &amp;lt;= rowPosition + 1; y++) {
      if (x &amp;gt;= 0 &amp;amp;&amp;amp; y &amp;gt;= 0 &amp;amp;&amp;amp; x &amp;lt; numOfColumns &amp;amp;&amp;amp; y &amp;lt; numOfRows) {
        if (!(x == columnPosition &amp;amp;&amp;amp; y == rowPosition)) {
          neighbours.push(grid[x][y]);
        }
      }
    }
  }

  return neighbours;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This gives us a working Conway’s Game of Life on a 30x30 grid.&lt;/p&gt;

&lt;h2 id=&quot;small-enhancement&quot;&gt;Small Enhancement&lt;/h2&gt;
&lt;p&gt;Doing so many calculations can be CPU intensive and we really do not need that many frames to always be calculated. Hence I’m limiting the framerate to be 30 frames per second. I can do this by putting the following line in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;framerate(30)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;check-the-project&quot;&gt;Check the Project&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kronaemmanuel.com/game_of_life/&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kronaemmanuel/game_of_life&quot;&gt;Repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lessons-learnt&quot;&gt;Lessons Learnt:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;p5.js is a really wonderful and easy to use library for such small projects where you’re not worried about things like &lt;a href=&quot;https://bundlephobia.com/package/p5@1.4.0&quot;&gt;bundle size&lt;/a&gt;, performance, etc. The syntax is really easy to use, and this should definitely be used to teach beginners how to code.&lt;/li&gt;
  &lt;li&gt;It is possible to make a semi-cool project in a few hours, I should do this more often as it is a very rewarding to see things actually working.&lt;/li&gt;
  &lt;li&gt;Documenting the process as you go through it, makes the process much easier. For example, I wrote this post as I was making the project, this means I could copy the latest code into my post as I wrote it. Makes things very easy.&lt;/li&gt;
  &lt;li&gt;I really need to start using an online service such as Contentful or at least Jekyll Admin to write these blogposts. I didn’t include images, gifs in this post as I knew I would have to bring them into my repo and then include them.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>krona</name></author><summary type="html">Conway’s Game of Life</summary></entry><entry><title type="html">Making A Simple Animation In Liquid</title><link href="/2021/09/01/making-a-simple-animation-in-liquid.html" rel="alternate" type="text/html" title="Making A Simple Animation In Liquid" /><published>2021-09-01T00:00:00+05:00</published><updated>2021-09-01T00:00:00+05:00</updated><id>/2021/09/01/making-a-simple-animation-in-liquid</id><content type="html" xml:base="/2021/09/01/making-a-simple-animation-in-liquid.html">&lt;p&gt;I was going to write a post about how great &lt;a href=&quot;https://github.com/tailwindlabs/tailwindcss-typography&quot;&gt;Tailwind Typography&lt;/a&gt; is because all I had to do to style my website was add two classes:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class&quot;prose prose-red&quot;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But after doing that little bit of work, I thought to myself:
“Oh, let’s make a “loading…” bouncing text animation for my website since a lot of stuff is still work in progress”&lt;/p&gt;

&lt;p&gt;Seems pretty simple right? Wrong.&lt;/p&gt;

&lt;p&gt;It would have been wayyyyy more simpler had I been using some other framework, but since this is Jekyll, which uses Liquid, it was much harder than it should have been. There are two main factors for this:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Finding documentation for liquid is much harder than for regular languages. I had to resort to guides and answers written for Shopify users to find my answers. The official documentation is really bad.&lt;/li&gt;
  &lt;li&gt;I have no idea how to include javascript or css right into my main file. I know they had &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;script&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;style&lt;/code&gt; tags in shopify, but those dont work in Jekyll&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can checkout &lt;a href=&quot;https://github.com/kronaemmanuel/kronaemmanuel.github.io/commit/1a4acbb48e656c0320912202f66272800a73b193&quot;&gt;this commit&lt;/a&gt; to checkout the liquid code which splits a word into letters, then applies a dynamic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;animation-duration&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;animation-delay&lt;/code&gt; to each letter.&lt;/p&gt;

&lt;p&gt;and here’s the final result:&lt;/p&gt;

&lt;div class=&quot;bouncing justify-center text-red-600 font-press-start&quot;&gt;
  
  
    &lt;div class=&quot;bouncing_letter&quot; style=&quot;animation-delay: 0s; animation-duration: 2.3s&quot;&gt;B&lt;/div&gt;
    
  
    &lt;div class=&quot;bouncing_letter&quot; style=&quot;animation-delay: 0.2s; animation-duration: 2.3s&quot;&gt;l&lt;/div&gt;
    
  
    &lt;div class=&quot;bouncing_letter&quot; style=&quot;animation-delay: 0.4s; animation-duration: 2.3s&quot;&gt;a&lt;/div&gt;
    
  
    &lt;div class=&quot;bouncing_letter&quot; style=&quot;animation-delay: 0.6s; animation-duration: 2.3s&quot;&gt;B&lt;/div&gt;
    
  
    &lt;div class=&quot;bouncing_letter&quot; style=&quot;animation-delay: 0.8s; animation-duration: 2.3s&quot;&gt;l&lt;/div&gt;
    
  
    &lt;div class=&quot;bouncing_letter&quot; style=&quot;animation-delay: 1.0s; animation-duration: 2.3s&quot;&gt;a&lt;/div&gt;
    
  
    &lt;div class=&quot;bouncing_letter&quot; style=&quot;animation-delay: 1.2s; animation-duration: 2.3s&quot;&gt;B&lt;/div&gt;
    
  
    &lt;div class=&quot;bouncing_letter&quot; style=&quot;animation-delay: 1.4s; animation-duration: 2.3s&quot;&gt;l&lt;/div&gt;
    
  
    &lt;div class=&quot;bouncing_letter&quot; style=&quot;animation-delay: 1.6s; animation-duration: 2.3s&quot;&gt;a&lt;/div&gt;
    
  
&lt;/div&gt;

&lt;p&gt;and if you aren’t reading this post too much in the future, you might see a similar animation down below, don’t worry, it will be removed soon enough.&lt;/p&gt;</content><author><name>krona</name></author><summary type="html">I was going to write a post about how great Tailwind Typography is because all I had to do to style my website was add two classes: &amp;lt;div class&quot;prose prose-red&quot;&amp;gt; &amp;lt;/div&amp;gt;</summary></entry><entry><title type="html">Making Github Actions Work</title><link href="/2021/08/26/making-github-actions-work.html" rel="alternate" type="text/html" title="Making Github Actions Work" /><published>2021-08-26T00:00:00+05:00</published><updated>2021-08-26T00:00:00+05:00</updated><id>/2021/08/26/making-github-actions-work</id><content type="html" xml:base="/2021/08/26/making-github-actions-work.html">&lt;p&gt;After finishing my tailwind blogpost yesterday, I realized that it didn’t actually publish and that my github action setup to deploy the websitewasn’t working. I had followed the &lt;a href=&quot;https://jekyllrb.com/docs/continuous-integration/github-actions/&quot;&gt;guide&lt;/a&gt; on Jekyll’s own website to make the github action, but it wasn’t working.&lt;/p&gt;

&lt;p&gt;I quickly realized that the action I had created didn’t support npm or Node. So I had to set that up myself, after trying it and failing too many times, I finally hit a vein of gold. I found this &lt;a href=&quot;https://githubmemory.com/repo/mhanberg/jekyll-postcss/issues/20&quot;&gt;issue&lt;/a&gt; by a lovely person named DavidUnzue. He was facing the exact same issue that I was facing, so I’m not describe the issue in detail here. Anyways, someone else and him had figured out how to solve it. And I followed his advice of using a &lt;a href=&quot;https://github.com/limjh16/jekyll-action-ts&quot;&gt;different&lt;/a&gt; github action and also running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install&lt;/code&gt; before it. And voila! My &lt;a href=&quot;https://github.com/kronaemmanuel/kronaemmanuel.github.io/actions/runs/1168075987&quot;&gt;github action&lt;/a&gt; started working! You can check out the github action history before the linked action to see all the times I failed. 15 times to be exact.&lt;/p&gt;

&lt;p&gt;Anyways, I realized that I had much to learn about github actions, and even more to learn about docker.&lt;/p&gt;</content><author><name>krona</name></author><summary type="html">After finishing my tailwind blogpost yesterday, I realized that it didn’t actually publish and that my github action setup to deploy the websitewasn’t working. I had followed the guide on Jekyll’s own website to make the github action, but it wasn’t working.</summary></entry><entry><title type="html">Tailwind Blunders</title><link href="/2021/08/25/tailwind-blunders.html" rel="alternate" type="text/html" title="Tailwind Blunders" /><published>2021-08-25T00:00:00+05:00</published><updated>2021-08-25T00:00:00+05:00</updated><id>/2021/08/25/tailwind-blunders</id><content type="html" xml:base="/2021/08/25/tailwind-blunders.html">&lt;p&gt;So I’m trying to setup my tailwindcss to work properly and I’m constantly getting this error:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Conversion error: Jekyll::Converters::Scss encountered an error while converting &apos;assets/css/styles.scss&apos;:
  Error: unterminated attribute selector for type on line 632:16 of styles.scss &amp;gt;&amp;gt; .prose ol[type=&quot;A&quot; s] { ---------------^
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And I wasn’t sure why I was getting this error. But then I compared my code to the repo of the guide I was following to do this by &lt;a href=&quot;https://katiekodes.com/jekyll-tailwind&quot;&gt;Katie Kodes&lt;/a&gt;. I realized that the Katie was importing the tailwind styles into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.css&lt;/code&gt; file while I was doing it in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.scss&lt;/code&gt;. So I changed my extension from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.scss&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.css&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Also, I found this &lt;a href=&quot;https://stackoverflow.com/questions/68898511/tailwindcss-typography-sasscsyntaxerror-error-unterminated-attribute-select/68898512#68898512&quot;&gt;Stack Overflow issue&lt;/a&gt; which was the same as mine. The guy who wrote the question answered his own question and reasoned that “this new syntax for CSS rules is not supported by libsass / sassc.” so hence the error.&lt;/p&gt;

&lt;p&gt;Well, I tried to understand what this meant and found this:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;I thought that the issue was with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[type=&quot;A&quot; s]&lt;/code&gt; part, maybe that was something new in the CSS Spec (I haven’t seen this syntax before). And maybe this wasn’t handled by Scss yet. However, the CSS attribute selector of the type: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.prose ol[type=&quot;A&quot; s]&lt;/code&gt; have been around since 2018. These &lt;a href=&quot;https://www.w3.org/TR/selectors-4/&quot;&gt;specs&lt;/a&gt; were last updated in 2018. So I guess it’s not that issue.&lt;/li&gt;
  &lt;li&gt;I also created a &lt;a href=&quot;https://codepen.io/StoryMode/pen/XWgJmrj&quot;&gt;Codepen&lt;/a&gt; to see if Scss created this error in a setup other than Jekyll. I set SCSS as my CSS preprocessor in it. However, it didn’t cause any errors, and worked.&lt;/li&gt;
  &lt;li&gt;The Stack Overflow guy had mentioned “libsass” and “sassc”. I found that LibSass was &lt;a href=&quot;https://sass-lang.com/blog/libsass-is-deprecated&quot;&gt;deprecated&lt;/a&gt; from the Sass’s blog. Also found that they now use Dart Sass, which was surprising to me, I didn’t know that Sass was using Dart. Go Dart!&lt;/li&gt;
  &lt;li&gt;Another thing that made me curious is that the error is about the selector being unterminated. I switched the preprocessor in my Codepen from &lt;a href=&quot;https://codepen.io/StoryMode/pen/OJgPyyd&quot;&gt;Scss to Sass&lt;/a&gt;, and it gave me an error, that it was expecting a end of line. Ofcourse it did, Sass does away with the squiggly braces, so ofcourse it gave me that error. Which makes me think, does jekyll use Sass or does it use Scss? 🤔 In the error message I see that the error is created by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jekyll::Converters:Scss&lt;/code&gt; which I guess means that its an Scss compiler, but then why would it not parse valid CSS code. Anywho, that’s as far as I’m gonna pursue this. Its late, I should be asleep by now.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Edit: Nevermind I found the reason why this wasn’t working. You can read all about it &lt;a href=&quot;https://github.com/jekyll/jekyll-sass-converter/issues/120#issuecomment-889739369&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</content><author><name>krona</name></author><summary type="html">So I’m trying to setup my tailwindcss to work properly and I’m constantly getting this error: Conversion error: Jekyll::Converters::Scss encountered an error while converting &apos;assets/css/styles.scss&apos;: Error: unterminated attribute selector for type on line 632:16 of styles.scss &amp;gt;&amp;gt; .prose ol[type=&quot;A&quot; s] { ---------------^</summary></entry></feed>